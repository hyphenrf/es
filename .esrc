# functions
fn empty var { ~ $#var 0 }

fn %% { bc <<<$^* }

fn car xs { return $xs(1) }
fn cdr xs { return $xs(2 ...) }
fn ini xs { return $xs(1 ... `{%% $#xs - 1}) }
fn fin xs { return $xs($#xs) }

fn alias name cmd {
   if {~ $name $cmd(1)} {cmd =<= {%whatis $cmd(1)} $cmd(2 ...)}
   fn-$name = $cmd
}

fn with-bash cmd {
   local (SHELL =<= {let (fn-bash = ) %whatis bash}) $cmd
}

fn always-with-bash cmd {
  let (def =<= {%whatis $cmd})
    fn-$cmd = with-bash $def
}
noexport = $noexport fn-always-with-bash

fn edfn fname cmd {
   eval `{var fn-$fname | $cmd}
}



# env
fn empty-or f var val ext {
   if {empty $var}{
      return $val
   }{
      $f $var $val $ext
   }
}

conc = @ l r sep { return $l$sep$r }
id = @ x { return $x }
noexport = $noexport fn-empty-or conc id

history  = ~/.es_history
NO_COLOR = 1
EDITOR   = vis

PATH =<= { empty-or $conc $PATH $HOME/.local/bin : }
XDG_RUNTIME_DIR =<= { empty-or $id $XDG_RUNTIME_DIR /var/run/user/$USER }
XDG_CONFIG_HOME=$HOME/.local/etc
XDG_CACHE_HOME=$HOME/.local/tmp
XDG_DATA_HOME=$HOME/.local/share

# opam
if {! empty `{which opam}} {
   fn oref {
      let (ifs=\n)
      for (i=`{opam env |sed '/^#/d;s/; export.*//'})
          eval $i
      return 0
   }
   oref
}

# windows env helper
fn winenv name {
   name =<= {%one $name}
   powershell.exe '$env:'$name |sed -E 's/\s+$//'
}



# aliases
alias vi        vis
alias v         vis
#alias e         emacs
alias lc        ls -xF '--color=none'
alias ls        ls -1 '--color=none'
alias psh       powershell.exe
alias py        python3
alias pastebin  nc tcp.st 7777

fn g { grep -rn $1 . }

fn goarm args {
  local (GOARCH = arm) {
      go build -ldflags '-s -w' $args
  }
}

fn hoogle queries {
   xargs curl <<< <={ %flatten ' -: ' \
     '-sG https://hoogle.haskell.org -d count=10 -d mode=json -d format=text
      --data-urlencode hoogle='''$queries''''
   } |jq -r '.[]|.item+"`"+.package.name?+"`"+.module.name?' |column -ts'`'
}

fn pkgbuild queries {
   curl -s 'https://aur.archlinux.org/cgit/aur.git/plain/PKGBUILD?h='$queries
}

fn ipinfo ip {
   curl -w '\n' -s 'https://ipinfo.io/'$ip
}

# set cwd as home when launching from windows terminal
local (cwd = `{pwd}) {
   {~ $cwd /mnt/c/Users/`{winenv USERNAME}} && cd
}



# fun meta stuff

let (create = $fn-%create)
fn %create fd file cmd {
   # overriding the pipe '>' to something equivalent to `noclobber`
   if {access -w $file} {
      echo 'appending because file exists - use `clobber '$file'` to overwrite' >[1=2]
      %append $fd $file $cmd
   }{
      $create $fd $file $cmd
   }
}

fn clobber file {
   # ..then making an explicit clobbering function
   $&openfile w 1 $file true
}
